<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_default_tower_big</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shootSpeed = room_speed / 2 * 2;
drag = false;
vspd = 0;
hspd = 0;
sellFor1 = 15;
sellFor = sellFor1;
baseUpgradeCost = 50;
upgradeCost = 50;
edge_padding = 5;

// Buttons
button_object[0] = obj_tower_drag;
button_object[1] = obj_tower_sell;
button_object[2] = obj_tower_health;
button_object[3] = obj_tower_upgrade;
button_object_created = false;
button_count = array_length_1d(button_object);
button_section_size = 360 / button_count;

for(var i = 0; i &lt; button_count; i++) {
    button[i] = noone;
}

// Stats
maxHp = 3;
hp = maxHp;

maxLevel = 2;
level = 0;
sLevel = 1;

attack = sLevel;

bulletType = obj_bullet_parent;

gui_list[0] = "HP: " + string(hp);
gui_list[1] = "ATK: " + string(attack);
gui_list[2] = "LVL: " + string(sLevel);
gui_list[3] = "Sell For: $" + string(sellFor);
gui_list[4] = "Upgrade Cost: $" + string(upgradeCost);
gui_list_total = "";
for(var i = 0; i &lt; array_length_1d(gui_list); i++) {
   gui_list_total += gui_list[i] + "#";
}
gui_list_height = string_height(gui_list_total);
gui_list_width = string_width(gui_list_total);
padding = 3;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.selectedTower == id) {
    global.selectedTower = noone;
}


if(drag) {
    drag = false;
    global.dragging = false;
}

explode();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_enemy)) {
    if(!drag) {
        bullet = instance_create(x, y, bulletType);   
        bullet.spd = 10;
        bullet.damage = attack;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sellFor = sellFor1 * sLevel;
attack = sLevel;

if(drag) {
    x = ((mouse_x div sprite_width) * sprite_width) + (sprite_width / 2);
    y = ((mouse_y div sprite_height) * sprite_height) + (sprite_height / 2); 
    mask_index = spr_dragging_mask;
} else {
    platform_collision();
    mask_index = sprite_index;
}

if(global.Health &lt;= 0) {
    instance_destroy();
}

if(instance_exists(obj_enemy)) {
    if(alarm[0] == -1) {
        alarm[0] = shootSpeed;
    }
}

if(global.selectedTower == id) {
    if((x != xprevious) || (y != yprevious)) {
        global.selectedTower = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!position_meeting(mouse_x, mouse_y, global.selectedTower) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_button_parent)) {
    global.selectedTower = noone;
}

// If not toching a solid
if(drag &amp;&amp; global.dragging) {
    if(!position_meeting(mouse_x, mouse_y, obj_solid) &amp;&amp; !place_meeting(x, y, obj_solid)) {
        // Place tower
        drag = false;
        global.dragging = false;  
    } else {
        // Else if dragging someone
        if(global.dragging) {
            // Play sound
            audio_emitter_pitch(global.audio_em, random_range(.8, 1.2));
            audio_play_sound_on(global.audio_em, snd_button_deny, false, 10);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If touching the floor
if(place_meeting(x, y + 32, obj_solid)) {
    // If not dragging anything
    if(!global.dragging) {
        // If no other tower is selected
        if(global.selectedTower == noone) {
            // Selected me
            global.selectedTower = id;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.selectedTower == id) {

    // Draw buttons
    depth = -1;    

    for(var i = 0; i &lt; button_count; i++) {
        if(!instance_exists(button_object[i])) {
            var offset = 64;
            var xx = x + lengthdir_x(offset, button_section_size * i);
            var yy = y + lengthdir_y(offset, button_section_size * i);
            xx = clamp(xx, sprite_get_width(spr_tower_move) / 2 + edge_padding, room_width - (sprite_get_width(spr_tower_move) / 2) - edge_padding);
            
            button[i] = instance_create(xx, yy, button_object[i]);
            
        }
        
        draw_set_colour(c_white);
        if(button[i] != noone) {
            draw_line(x, y, button[i].x, button[i].y);
        }
    }
    
    // Define stats
    draw_set_font(fnt_gui_6);
    
    gui_list[0] = "HP: " + string(hp);
    gui_list[1] = "ATK: " + string(attack);
    gui_list[2] = "LVL: " + string(sLevel);
    gui_list[3] = "Sell For: $" + string(sellFor);
    gui_list[4] = "Upgrade Cost: $" + string(upgradeCost); 
    if(level &gt;= maxLevel) {
        gui_list[4] = "";     
    }
    
    gui_list_total = "";
    for(var i = 0; i &lt; array_length_1d(gui_list); i++) {
        if(gui_list[i] != "") {
            gui_list_total += gui_list[i] + "#";
        }
    }
    gui_list_height = string_height(gui_list_total);
    gui_list_width = string_width(gui_list_total);

    
    // Draw stats box
    var lineLength = 80;
    var textPadding = 8;
    
    var xx = x - (gui_list_width / 2);
    var yy = y - (lineLength + gui_list_height);
    var xx2 = x + (gui_list_width / 2);
    var yy2 = y - lineLength;
    var area = gui_list_height * gui_list_width;
    
    while(xx &lt; edge_padding) {
        xx++;
        xx2++;
    }
    
    while(xx2 &gt; room_width - edge_padding) {
        xx--;
        xx2--;
    }
    
    draw_set_colour(c_white);
    draw_line(x, y, x, y - lineLength);
    draw_set_colour(c_black);
    draw_rectangle(xx - padding, yy - padding, xx2 + padding, yy2 + padding, false);
    draw_set_colour(c_white);
    draw_rectangle(xx - padding, yy - padding, xx2 + padding, yy2 + padding, true);
    
    // Draw stats   
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_colour(c_white);
    
    draw_text(xx, yy, gui_list_total);

    
} else {
    depth = 0;   
}

draw_set_defaults();

// Draws self and damage
image_index = level;

draw_self();

var index = 0;

if(hp &lt;= (maxHp / 3) * 2) { 
    index = 1;
} 

if(hp &lt;= (maxHp / 3)) { 
    index = 2;
}

draw_sprite(spr_tower_damage, index, x, y);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

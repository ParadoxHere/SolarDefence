<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tower1_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_button_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = obj_tower_parent;
cost = 25;
selected = false;
name = "Null";
desc = "";
waveUnlock = 0;

padding = 3;

cooldown = room_speed;

cdepth = depth;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if not dragging anything
if(!global.dragging) {
    // If you have enough money buy and level is correct
    if(global.money &gt;= cost &amp;&amp; waveUnlock &lt;= global.wave) { 
        // Takes away money
        console_check_command("[money_take=" + string(cost) + "]");
         
        // Indicates the lost money
        indicate(cost, "-$");
        
        // Create tower
        ins = instance_create(x, y, type);
        // Makes the dragging variables true
        ins.drag = true;
        global.dragging = true;
        global.selcectedTower = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>follow_view();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Makes tower
pressed = button_press();
hover = button_hover();

// If health greater than 0
if(global.Health &gt; 0) {
    // If mouse is hovering show GUI
    if(hover) {
        selected = true;
    } else {
        selected = false;
    }
    
    // If click create tower
    if(pressed &amp;&amp; alarm[1] == -1) {  
            alarm[1] = cooldown;
            // Double check to see if nothing is being dragged
            if(global.dragging == false) {
                global.selectedTower = noone;
                // Create tower
                if(alarm[0] == -1) {
                    alarm[0] = 10;
                }
            }
        
    }
}

if(selected) {
    depth = -id * 1000;
} else {
    depth = -1000;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(selected) {   
    // Define stats
    draw_set_font(fnt_gui_12);
    
    gui_list[0] = name;
    gui_list[1] = "Cost: $" + string(cost);
    gui_list[2] = "Unlock on wave: " + string(waveUnlock);
    gui_list[3] = desc;
    
    gui_list_total = "";
    for(var i = 0; i &lt; array_length_1d(gui_list); i++) {
        if(gui_list[i] != "") {
            gui_list_total += gui_list[i] + "#";
        }
    }
    gui_list_height = string_height(gui_list_total);
    gui_list_width = string_width(gui_list_total);
    
    // Draw stats box
    var lineLength = 20;
    
    var xx = x - gui_list_width - lineLength;
    var yy = y - gui_list_height / 2;
    var xx2 = x - lineLength
    var yy2 = y + gui_list_height / 2;
    
    draw_set_colour(c_white);
    draw_line(x, y, x - lineLength, y);
    draw_set_colour(c_black);
    draw_rectangle(xx - padding, yy - padding, xx2 + padding, yy2 + padding, false);
    draw_set_colour(c_white);
    draw_rectangle(xx - padding, yy - padding, xx2 + padding, yy2 + padding, true);
     
     // Draw stats   
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_colour(c_white);
    
    draw_text(xx, yy, gui_list_total);
    
    //Misc
    
    
}

draw_self();

draw_set_defaults();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
